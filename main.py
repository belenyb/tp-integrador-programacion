# -*- coding: utf-8 -*-
"""TP-Integrador-PI_Kaadu-Yarde_Buller.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z8rI16aZ-8IQ0iJYJYhcGSD9ZHqQf3MO

<h1>Trabajo Práctico Integrador Programación I</h1>
<p style="margin-bottom: 0;">Arturo Kaadú</p>
<p style="margin-bottom: 0;">Belén Yarde Buller</p>

## Imports

- Usamos librería `requests` para hacer llamadas a la PokéAPI
- Usamos librería `json` para parsear las respuestas de la API
- Usamos librería `time` para calcular los tiempos de cada algoritmo de búsqueda
"""

import requests
import json
import time

from funciones_busqueda import linear_search

"""## Funciones

**Obtener lista de 50 primeros pokemons y guardar nombre y altura**

> Se hacen dos llamados a endpoints, uno a `/pokemon?offset=0&limit=50` para traer los 50 primeros pokemons, y otro a `https://pokeapi.co/api/v2/pokemon/{pokemon_id}/` para traer la altura de cada pokemon utilizando su id como parámetro en la url.
"""

def get_pokemons(limit):
  # Obtenemos los primeros n (limit) pokemons de la PokéAPI, extrayendo solo su nombre y altura.
  # Devolvemos los datos directamente como una lista de diccionarios.

  # Definimos la url base de la PokéAPI
  base_url = "https://pokeapi.co/api/v2/"

  # Primera petición a endpoint para obtener un listado de los primeros 50 pokemons
  pokemons_list_url = f"{base_url}pokemon?offset=0&limit={limit}"

  # Inicializamos una lista vacía que luego retornaremos al final de la función
  get_pokemons_list = []

  # Hacemos la petición a la PokéAPI usando try except para capturar posibles errores y excepciones
  try:
      response_list = requests.get(pokemons_list_url)
      response_list.raise_for_status()
      list_info = response_list.json()

      # Del json devuelto en la petición, obtenemos el campo "results"
      pokemon_entries = list_info['results']

  except requests.exceptions.RequestException as e:
      # Si hay un error en la request, se imprime un mensaje de error por consola y se devuelve una lista vacía
      print(f"Error en get_pokemons(): {e}")
      return []

  # Segunda petición a endpoint para obtener la altura de cada pokemon
  # Iteramos sobre cada pokemon obtenido en la lista inicial, y de cada uno de ellos, tomamos la url: entry['url']
  for i, entry in enumerate(pokemon_entries):
      pokemon_detail_url = entry['url']

      # Volvemos a utilizar un bloque try except para capturar posibles errores
      try:
          response_detail = requests.get(pokemon_detail_url)
          response_detail.raise_for_status()
          pokemon_info = response_detail.json()

          # Creamos un diccionario pokemon_data para guardar la información que nos interesa: nombre y altura
          pokemon_data = {
              "name": pokemon_info['name'],
              "height": pokemon_info['height']
          }

          # Agregamos el diccionario de cada pokemon a la lista que retornará la función
          get_pokemons_list.append(pokemon_data)

      except requests.exceptions.RequestException as e:
                # Si hay un error en la request, se imprime un mensaje de error por consola y se devuelve una lista vacía
          print(f"Error al obtener detalles para '{entry['name']}' ({pokemon_detail_url}): {e}")
          continue # Continúa con el siguiente Pokémon si hay un error

  # Devolvemos la lista obtenida mediante las llamadas a la API
  return get_pokemons_list

"""## Ejecución principal"""

if __name__ == "__main__":
    GET_POKEMONS_LIMIT = 50

    # Llamamos a la función para obtener los datos y guardarlos en pokemons_list
    pokemons_list = get_pokemons(GET_POKEMONS_LIMIT)

    if not pokemons_list:
        print("Error al obtener los pokemons.")
    else:
        # Acá ejecutamos los algoritmos de búsqueda y ordenamiento
        desired_pokemon = input("Por favor, ingrese el pokemon que desea buscar: ")
        linear_search_response = linear_search(pokemons_list, desired_pokemon)
